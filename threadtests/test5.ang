
[`time,`thread,`io] each {i library drop}

:startMsgThread
    none (|:m| drop
        {
            thread$waitrecv !m
            [?m fst thread$id, ?m snd] "[%03d] %s" format.
        }
    ) thread$create !MsgThread
;

:msgSend |s:|
    [thread$cur,?s] ?MsgThread thread$send;

:calc |a:|
    0 ?a range (|a:r|
        0.01 time$delay
        ?a dup * !r
        [?a,?r] "%f -> %f" format msgSend
        ?r
    ) map 0 swap (+) reduce
;


startMsgThread

:main
    []
    100 200 range each {
        i (|a:| 0 10 range each {i ?a * calc} ) thread$create,
    } dup thread$join (thread$retval) map show.
;

{main}
    
