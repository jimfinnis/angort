gccount !BaseGC

#single range, totalling up
0 
1 11 range each { i + }
55 = "range1" assert
?BaseGC gccount = "range1gc" assert # leave only arglist

0
0 0  range each { 1 +}
0 = "rangenone" assert

# nested ranges
#1 debug
:mkrange 1 11 range ;
0 mkrange each { mkrange each {i j * + }}
3025 = "range2"  assert
?BaseGC gccount = "range2gc" assert

# reiteration on a stored range
global t
1 6 range !t
0 ?t each {i +} 
15 = "range3" assert
gccount .
?BaseGC 1+ gccount = "range3gc" assert # ?t holds a range

# smoke test to screw up the stack
0 
1 11 range each { i + }
55 = "range4" assert 

# then try the stored range again
0 ?t each {i +} 
15 = "range5" assert
?BaseGC 1+ gccount = "range5gc" assert # ?t holds a range

# finally, try to iterate over the same range nested.
mkrange !t
0 ?t each {?t each {i j * +}}
3025 = "range6"  assert
?BaseGC 1+ gccount = "range6gc" assert
0 !t
?BaseGC gccount = "range6gc2" assert

# float range

0
0 1 0.1 frange each{ i+ } 
4.5 = "frange" assert

# step integer range

0
0 100 5 srange each { i+ dup.}
950 = "srange" assert

0 100 2 srange !R

2 ?R in "rangein1" assert
4 ?R in "rangein2" assert
1 ?R in not "rangein2" assert
3.0 ?R in not "rangein3" assert
100 ?R in not "rangein4" assert
101 ?R in not "rangein4" assert

0!R
?BaseGC gccount = "range6gc3" assert
quit
