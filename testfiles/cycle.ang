[%] !A
[%] !B

?B `foo ?A set
?A `foo ?B set

gc
3 gccount = "cycle1" assert

0 !A
0 !B
1 1 1 drop drop drop
gc
gccount.
1 gccount = "cycle2" assert


[%] !A
[% `foo A ] !B
[% `bar B, `fod A] !C
?C `buz ?A set
gccount .
4 gccount = "cycle2" assert

gc
4 gccount = "cycle2" assert

0 !A
0 !B
0 !C
1 1 1 drop drop drop
gc
gccount.
1 gccount = "cycle4" assert

# hashes appear to be OK, let's check lists.

[10,20,30] !A
[1,2,3,?A,4] !B
?B ?A push
?A each {i.}
gc
3 gccount  = "listcyc1" assert
0 !A
0 !B
gc
1 gccount  = "listcyc2" assert

# lists are good, let's do something with closures AND lists

snark
[10,20,30] !A

:mklistprinter |list:| (?list each {i.});

?A mklistprinter
?A push

# clear the locals stack

:foo |a,b,c,d:|;

1 2 3 4 foo
gccount.
4 gccount  = "closurecyc1" assert
0!A
gc
gccount.

1 gccount  = "closurecyc2" assert

quit
