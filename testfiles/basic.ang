1 assertdebug
3 1 + 4 = "3+1=4" assert
3 1 - 2 = "3-1=2" assert
3 1 - 1 = not "not 3-1=2" assert
3 1 - 1 != "3-1!=2" assert

5 4 * 20 = "mult" assert
5 4 / 1 = "div" assert
5.0 4 / 1 = not "div-int-1" assert
5.0 4 / 1.25 =  "div-int-2" assert
5 4.0 / 1.25 =  "div-int-3" assert
5 4.0 / 1 !=  "div-int-4" assert

8 5 % 3 = "mod" assert

5 6 < "<" assert
5 5 < not "<not" assert
6 5 > ">" assert
6 6 > not ">not" assert

12 dup + 24 = "dup" assert
4 2.0 swap / 0.5 = "swap" assert

5 25 over 5 = "over1" assert 25 = "over2" assert 5 = "over3" assert

1 none = not "noneeq1" assert 
"foo" none = not "noneeq2" assert 
none none = not "noneeq3" assert 
[] none = not "noneeq4" assert 

1 none != "noneeq2" assert 


global s
global t
5 !t
global t
?t isnone "multiple global define" assert

5 !t
2 !s

3 4 ?t + + 12 = "!" assert


?t ?s - 3 = "!sub" assert
?s ?t - -3 = "!sub2" assert
?s ?t - 10 + 7 = "!arith" assert

# check immediate globals
45 !Fooble
10 !Fronk
12 !Trooble

?Fooble ?Fronk + 55 = "immediate global"

:foo |x,y:|
    ?x ?y -
;

:bar |x,y:|
    ?x 2 * ?y /
    ?y 3 * ?x +
    foo
;

:baz |x,y:|
    ?y ?x foo
    ?x ?y bar
    foo
;    

6 abs 6 = "abs1" assert
-6 abs 6 = "abs2" assert
6.2 abs 6.2 = "abs3" assert
-6.2 abs 6.2 = "abs4" assert

10 16 foo -6 = ":" assert

4.0 5 bar  8.0 5 / 19 -   = "arithfunc" assert

10.0 12.0 baz 46.3333 - abs 0.001< "arithfunc2" assert


100 const fred

fred 2 * 200 = "intconst" assert

# this is really just another way of defining a word.

(1+) const adder
4 adder adder 6 = "codeconst" assert

# and another

(2+) !Foo
4 Foo 6 = "code2const" assert

110 const fish
120 const pasty
1 const one

one fish + 111 = "multiconst" assert

quit
