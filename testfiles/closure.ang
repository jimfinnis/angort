
1 assertdebug
# takes x, makes a function which adds x to the argument y
:makeadder |x:| (|y:| ?x ?y +) ;

#stack 5, make a function to add 4, run it on 5.
5 4 makeadder @ 
9 = "closure1" assert
# 4 way string concat, the first 2 strings are stored in the closure

:test |x,y:|
    (|a,b:| ?x ?y ?a ?b + + +)
;

global t
"step 1" p nl
"foo" "bar" test !t
"step 2" p nl
"zog" "fish" ?t@ "foobarzogfish" = "closure2a" assert
"step 3" p nl
"zog1" "fish" ?t@ "foobarzog1fish" = "closure2b" assert
"step 4" p nl
"blas" "frink" ?t@ "foobarblasfrink" = "closure2c" assert
"step 5" p nl
"boz" "1" test !t
"step 6" p nl
"zig" "foo" ?t@ "boz1zigfoo" = "closure3" assert
"step 7" p nl
1 !t # overwrite 
gccount.
dumpframe

gccount 2 = "closuregc0" assert # GC count should be one here, for arg lists

gccount !BaseGC

# OK, nested closure. This is a function which takes two arguments,
# returning a function which takes two arguments which returns a function
# which takes two arguments. That bottom function joins all the arguments
# together.

:test2 |x,y:|
    (
        |a,b:|
        (
            |c,d:|
            ?x ?y ?a ?b ?c ?d + + + + +))
;



# produces a function which takes two args and returns a closure for a function
# which takes two args...
"foo" "bar" test2 !t

# call that function with the necessary arguments to get another one, also with
# two arguments

"biz" "boz" ?t@ !t

# now run *that* function 
"glem" "zark" ?t@

# and test the result
"foobarbizbozglemzark" = "nested closures" assert

1 !t # clear the "t" variable to drop the reference

# if you write a closure over a closure, the total gc count should not increment
2 ?BaseGC = "closure over closure gc" assert


# in this case, there was a problem when a closure which was only referred to
# on the stack was called. When the closure was called, the closure reference
# was popped and decreffed to 0. Then, when another value was placed on the stack
# *inside* the closure, the stack frame previously holding the closure was overwritten,
# causing the zero-reffed closure to delete itself. A subsequent call to OP_CLOSUREGET
# tried to read a variable from inside the now deleted closure table, giving NONE and
# a failure.
# The cure is to have a separate stack, gcrstack, on which closures are increffed and
# stacked when they are called, and popped and decreffed on OP_END.

:quop |x:| (?x +);
1 1 quop @ 2 = "closure weirdness" assert
0 !t 1 1 1 drop drop drop
# closure mutability

:mkcounter |:ct|
    0 !ct
    (?ct 1+ dup !ct)
;


global a
global b

mkcounter !a
mkcounter !b

"GCCOUNT=" p gccount p nl
?BaseGC 4+ gccount = "stacked closure GC count" assert

?a@ 1 = "mutclosa1" assert
?a@ 2 = "mutclosa2" assert
?a@ 3 = "mutclosa3" assert
?b@ 1 = "mutclosb1" assert
?b@ 2 = "mutclosb2" assert
?b@ 3 = "mutclosb3" assert

# internal mutability

( |:x|
    0!x
    (1!x)@
    ?x 1 = "internal mutability" assert
)@


1 1 1 1 1 1 1 1 1 # stack overwrite
0 !a
0 !b
0 !t


# ordering of parameters

#!/usr/local/bin/angort

:f |a:b|
    `b !b
    ?a `a = "closord1" assert
    ?b `b = "closord2" assert
    (
        ?a `a = "closord3" assert
        ?b `b = "closord4" assert
    )
;


`a f@


# 
# Here, the inner closure attempted to lookup the variable in the outer function "s",
# and in building its table, used the index in the outer function's table rather than the
# index in the block. This was fixed by the code labelled CRASH 12/8/17 in angort.cpp,
# which dereferences again through the closure list of the parent (which becomes its table)
# to get the block index.

:mkcrash120817 |t:|
    (|s:|
         ?t (?s +) @
    )
;
4 mkcrash120817 !F
7 ?F @ 11 = "crash120817" assert
0!F

# this failed after fixing the above because of a bug in getting the
# block index, best put it in here.
:mkcrash120817b |a,b:|
    (|c,d:|
        [?a,?b,?c,?d] "," intercalate
    )
;


1 2 mkcrash120817b !F
3 4 ?F@ "1,2,3,4" = "crash120817b" assert
0!F
clear 0 0 0 0 0 0 0 0 0 0 0 0 clear
gc
"GCCOUNT=" p gccount p nl


# this tests the closure-codeblock-closure nesting bug that
# has been around for a couple of years, and is hopefully fixed
# by dummy closure blocks

:mkcrash140520 |a:|
    
    # outer function takes a list and runs the inner function on its
    # elements, each of which should be lists.
    (
        # inner function takes a list and multiplies all elements by the
        # parameter.
        (?a *)map
    ) map
;

# should give [[2,4,6],[8,10,12]]
[[1,2,3],[4,5,6]] 2 mkcrash140520
[[2,4,6],[8,10,12]] eq "mkcrash140520" assert

clear 0 0 0 0 0 0 0 0 0 0 0 0 clear
"GCCOUNT=" p gccount p nl
?BaseGC gccount = "GC count clear at end of closure tests" assert


#
# Bug which never occurred in the wild - convertToClosure didn't
# convert inc/dec operations on locals. This rarely causes a 
# problem because parseVarAccess normally does closes things, but
# sometimes not (e.g. in "yield", which converts all variables).
#
:mkcrash240720 |a:|
    !+a
    ?a yield
;

0 mkcrash240720 1 = "mkcrash270720" assert


quit
