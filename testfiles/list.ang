#
# list tests, need expanding
#

[1,2,3] pop 3= "pop item" assert

[1,2,3,4,5] (2 % 0 =) filter !L
?L len 2 = "filter1" assert
?L pop 4 = "filter2" assert
?L pop 2 = "filter3" assert

[1,2,3,4,5] (2 % 0 =) filter !L


2 ?L in "listin1" assert
4 ?L in "listin2" assert
1 ?L in not "listin2" assert
3.0 ?L in not "listin3" assert
10 ?L in not "listin4" assert

# test of equality operator on list (and others)

1 2 eq not "listeq0a" assert
2 2 eq "listeq0b" assert
1 "1" eq "listeq0c" assert # equality coercion still works in "eq"

"fish" [1,2,3,4,5] eq not "listeq0" assert
"fish" [1,2,3,4,5] swap eq not "listeq01" assert

[1,2,3,4,5] [1,2,3,4,5] eq "listeq1" assert
[1,2,2,4,5] [1,2,3,4,5] eq not "listeq2" assert

[1,2,3] [1,2] eq not "listeq3" assert

[1,2,[3,4]] [1,2,[3,4]] eq "listeq4" assert
[1,2,[3,4]] [1,2,[5,4]] eq not "listeq4" assert


:sl dup "," intercalate.; # for debugging

[1,2,3,4,5] !L
?L 0 3 slice [1,2,3] eq "lslice1" assert
?L 0 0 slice [1,2,3,4,5] eq "lslice2" assert
?L 1 3 slice [2,3] eq "lslice3" assert
?L 2 3 slice [3] eq "lslice4" assert
?L 3 3 slice [] eq "lslice5" assert
?L 4 3 slice [] eq "lslice6" assert
?L 2 -1 slice [3,4] eq "lslice7" assert
?L -3 0 slice [3,4,5] eq "lslice8" assert
?L 6 0 slice [] eq "lslice9" assert
?L 5 0 slice [] eq "lslice10" assert
?L 7 -1 slice [] eq "lslice11" assert
?L -1 0 slice [5] eq "lslice12" assert
?L -4 -5 slice [] eq "lslice13" assert
?L -4 -1 slice [2,3,4] eq "lslice14" assert

# adding
[1,2,3,4] [6,7,8,9] + [1,2,3,4,6,7,8,9] eq "listadd" assert



# cloning

[1,2,3] !L
?L clone !L2
?L ?L2 eq "lclone1" assert
4 ?L2 push 
?L2 [1,2,3,4] eq "lclone2" assert
?L [1,2,3] eq "lclone2" assert

1 ?L remove 2 = "lremove" assert
[1,3] ?L eq "lremove2" assert


# map and reduce, also for ranges

[1,2,3,4,5] (dup *) map [1,4,9,16,25] eq "lmap" assert
1 6 range (dup *) map [1,4,9,16,25] eq "rangemap" assert
0 5 range () map [0,1,2,3,4] eq "lmapconv" assert

0 6 range () map 0 swap (+) reduce 15 = "lreduce" assert

# filter2

[0,1,2,3,4,5] (2 % 0 =) filter2 !True !False
?False [1,3,5] eq "filter2a" assert
?True [0,2,4] eq "filter2b" assert

# zipWith

[0,1,2] [10,20,30] (+) zipWith [10,21,32] eq "zipWith" assert



quit
