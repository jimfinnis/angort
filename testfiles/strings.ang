"foo" "foo" = "streq" assert
"foob" "foo" != "streq" assert
"foo" "bar" + "foobar" = "strconc" assert

"foo" 1 + "foo1" = "strconv" assert

"Donec volutpat, tortor a congue aliquet, tortor lorem mattis urna, pretium sollicitudin nisi nibh nec ex. Phasellus pellentesque placerat tortor. Aenean pulvinar posuere arcu, et lacinia ex. Vestibulum hendrerit nisi ut dolor bibendum, a congue nisl tristique. Maecenas efficitur purus felis, non molestie metus pharetra vitae. Morbi sed ex elit. Nullam vehicula volutpat massa at fringilla. In hac habitasse platea dictumst. Vivamus sit amet ligula mi. Vivamus ac odio sed elit sodales mattis ac at elit. Aenean nunc eros, venenatis eu ultricies at, rutrum ac nisi. Vivamus eget urna et augue dignissim fermentum et sit amet velit. Nulla vel sapien pharetra sapien porttitor porta non in dui. Vestibulum iaculis nisi in neque egestas tempor." !Long
?Long 20 wrap "\n" split !T
?T each {i len 20 <= "wrap" assert}

?T " " intercalate len ?Long len = "wrap2" assert

global a
global b

"foo" dup !a !b
?a "foo" = "strdup1" assert
?b "foo" = "strdup2" assert
?a "bar" + !b 
?a "foo" = "strdup3" assert
?b "foobar" = "strdup4" assert

"fooble" 3 * "fooblefooblefooble" = "repeat" assert

:qq dup "**"p p "**".;

"abcdefg" !a
?a 0 4 slice "abcd" =   "slice1" assert
?a 1 4 slice "bcd" =   "slice2" assert
?a 1 40 slice "bcdefg" =   "slice3" assert
?a -3 0 slice "efg" =   "slice4" assert
?a -4 -2 slice "de" =   "slice5" assert
?a 2 -2 slice "cde" =   "slice6" assert
?a 3 2 slice "" = "slice7" assert
?a -2 -3 slice "" = "slice8" assert

"foo" !A
?A clone !B
"w" 0 ?A set
?A "woo" = "clone1" assert
?B "foo" = "clone2" assert


"b" 0 ?A set
?A "boo" = "strset1" assert

0 0 ?A set
?A "0oo" = "strset2" assert
?B "foo" = "clone3" assert


"f" "foo" in "strin1" assert
"g" "foo" in not "strin2" assert
"go" "foo" in not "strin2a" assert
"fo" "foo" in "strin3" assert
"oo" "foo" in "strin4" assert
"" "foo" in "strin5" assert

quit


