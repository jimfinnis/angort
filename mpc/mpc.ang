package mpcc

library "./libangortmpc.so" drop

none 0 mpc$connect

private

:quote |x:| "\"" ?x "\"" ++;

:chknone |s:| ?s isnone if "<<NONE>>" else ?s then;


:dosearch |tag,str:|
    :"(tag str -- list) non exact search shortcut"
    [% ?tag ?str] 0 mpc$search;

:showlist |startidx,endidx:list,titlen,artlen,stat,i,cur,listlen|
    mpc$list dup !list len !listlen
    mpc$stat !stat
    "List length: " std$p ?listlen.
    # work out some max lengths
    0!titlen
    0!artlen
    ?startidx ?endidx range each {
        i ?listlen = ifleave
        i ?list get !cur
        ?cur?`artist chknone len dup ?artlen > if !artlen else drop then
        ?cur?`title chknone len dup ?titlen > if !titlen else drop then
        
    }
    
    ?titlen 1+ !titlen
    ?artlen 1+ !artlen
    
    {
        ?titlen ?artlen + 80 > if 
            ?titlen 20 > if ?titlen 1- !titlen then
            ?artlen 20 > if ?artlen 1- !artlen then
        else
            leave
        then
    }
    
    ?startidx!i
    ?startidx ?endidx range each {
        i ?listlen = ifleave
        i ?list get !cur
        ?i ?stat?`pos = if
            ">> " std$p
        else
            "   " std$p
        then
        
        
        [?i, 
         ?cur?`artist ?artlen truncstr ?artlen padleft,
         ?cur?`title  ?titlen truncstr ?titlen padleft] 
        "%4d %s %s" format .
        ?i 1+ !i
    }
    
;






public


:artist |name:|
    :"(name -- list) search for songs by an artist"
    `artist ?name dosearch;
    
:album |name:|
    :"(name -- list) search for songs on an album"
    `album ?name dosearch;

:song |name:|
    :"(name -- list) search for songs by title"
    `title ?name dosearch;

:grep |list,str:|
    :"(list str -- list) filter a list of songs for a string"
    ?list (?`name ?str istridx isnone not) filter;

:m
    :"(cmd --) run an mpc$mpc command and list the output"
    mpc$mpc each {i.};

:p
    :"(--) start playing"
    none mpc$play;
:s
    :"(--) stop playing"
    mpc$stop;

:ps
    :"(--) pause"
    mpc$pause;


    


:l |:stat,start,end|
    :"(--) list the current playlist, numbered, indicating the current song"
    mpc$stat !stat
    ?stat?`pos
    10- dup 0< if drop 0 then
    dup 20+
    showlist
    
    
;    

:stat |:stat,list|
    mpc$stat !stat
    mpc$list !list
    
    "State : "std$p ?stat?`state.
    ?stat?`pos 0 < not if
        ?stat?`pos ?list get dup
        "Current Song: " std$p ?`title.
        "              " std$p ?`artist.
        ?stat?`elapsed std$p "/" std$p ?stat?`total.
    then
    
    
;

:clr mpc$clr;
:add mpc$add;

:d |x:|
    :"(lst --) dump a list or hash"
    ?x type `hash = if
        ?x each {i std$p "   " std$p i ?x get .}
    else
        ?x each {i.}
    then;

:f 
    :"(--) move forwards in current playlist"
    mpc$next;

:b 
    :"(--) move backwards in current playlist"
    mpc$prev;

:go |x:|
    :"(n --) start playing from given song index in playlist"
    ?x mpc$play;

:shuf |lst:n,a,l|
    ?lst len !l
    ?l 1- 0 range each {
        rand i % !a
        i ?lst get
        ?a ?lst get
        i ?lst set
        ?a ?lst set
    } ?lst;

:load
    :"(name --) load a playlist"
    mpc$load;
:save 
    :"(name --) save a playlist"
    mpc$save;

:rm
    :"(name --) delete a playlist"
    mpc$rm;

:ls
    :"() list playlists"
    mpc$playlists each {i.};

:all |:ids|
    :"(--list) list all songs (takes ages)"
    []
    `artist [%] mpc$tags each {i.
        [% `artist i] 1 mpc$search each{ i, }
    }
    
;

endpackage import
