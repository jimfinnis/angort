Notes for this, because it has to be done fairly carefully.

Defining options: done with a list of hashes. It's a list because sometimes
we fetch by name and sometimes by char.

Each opt hash:
    `description        :   prints in usage strings (required)
    `name               :   for long opts and results keys (like --help)
                            (required)
    `char               :   for short opts (like -x) (optional)
    `required           :   is option required? int (as bool) (opt, default 0)
    `type               :   `integer, `float, `string, `list, `bool 
                            If list, the args are separated with `sepchar
                            and have the type `listtype. Non-boolean
                            implies that the option has an argument.
                            (Optional, default is `bool).
                            (opt, default `string)
    `sepchar            :   separator for lists (opt, default ",")
    `listtype           :   type of list items (required if type is list)
    `default            :   the default value if `required is false
    
Other arguments: done with another list of hashes
Each argument:
    `description        :   prints in usage strings (required)
    `name               :   for results key (required)
    `required           :   is arg required? int, (opt, default 1)
    `type               :   `integer, `float, `string, `list 
                            If list, the args are separated with `sepchar
                            and have the type `listtype (required)
    `sepchar            :   separator for lists (opt, default ",")
    `listtype           :   type of list items (required if type is list)
    `default            :   the default value if `required is false
Note: optional args must follow all the required args.    

Getting arguments without leading stuff:
    
    opts$getargs (-- list)
    
This copies "args" (i.e. the system argv). It then removes
the leading item if it contains the string "angort" (i.e. it's
the name of the interpreter). It then removes the string after
that (the script name) and returns the result.

Parsing:


    opts$process (cmdname optlist arglist -- args) 

Results is a hash containing the value of each option and
argument keyed by name. Any unprocessed args are in remnants.
An error message will be printed on failure, giving the usage.



