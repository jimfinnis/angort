##
## Various utilities: 
## - state machine with key handling
## - graphics helpers (colours, text)

## Usage:
## Create states. 
## Create keymaps for states with `keys symbol (or use `onkeydown)
##   These can use `left, `right etc. special keys
## Call stdutils$run
## 
##
## Useful things:
## setfont sets the font for text rendering
## StateHelp is a standard help state - it uses HelpLineSpacing for interline gaps
## RenderStateXY is a pair of coords to render the current state at


[`time,`sdl] each {i library drop}


####################### State machine #############################

# each state is a map consisting of:
# `name : name of state 
# `entry : run on entering state (optional)
# `draw : draw function
# `keys : key function map (see below) (mutex with `onkeydown)
# `onkeydown : onkeydown function (mutex with `keys)
# `onmousedown : onmousedown function (optional)
#
# Keymaps for `keys consist of key->[func,"name"] maps
# The key is a simple char (e.g. "x"), or a key with a modifier (e.g. "C-x").
# Modifiers are C-, S-, A- or a combination thereof (order CSA-, so SA-, or CS- etc.)
# Special keys are "left","right","up","down","esc","del","tab","space"


package sdlutils


public
none!CurState
none!PrevState
:gostate |s:| ?s?`name. ?CurState !PrevState ?s?`entry @ ?s !CurState;
:prevstate ?PrevState gostate;

####################### Key handling for state machine ############


# special key codes

[%
4000004fh `right ,
40000050h `left ,
40000051h `down ,
40000052h `up 
] !SpecialKeys

# non-printing key codes
[%
 127 `del,
 27 `esc,
 9 `tab,
 32 `space
] !NonPrintingKeys



# key modifier checks

:isctrl sdl$keymod sdl$modctrl band ;
:isshift sdl$keymod sdl$modshift band ;
:isnomod sdl$keymod 0 = ;

private

# get a keycode for a character
:keycode |k:mods|
    # special keys
    cases
        ?k 255 > if
            ?k ?SpecialKeys in if
                ?k ?SpecialKeys get
            else
                "unknown keycode " ?k +.
                `unknown
            then
        case
        ?k ?NonPrintingKeys in if
            ?k ?NonPrintingKeys get
        case
        ?k 32 < if
            "unknown nonprinting keycode " ?k +.
            `unknown
        case
        ?k chr otherwise
    tostr
    # keyname is on the stack as a string, now add modifiers
    "" !mods
    isshift if "S" ?mods + !mods then
    isctrl if "C" ?mods + !mods then
    ?mods "" != if
        ?mods "-" + swap +
    then
;

# the standard key handler, used if `keys is set in the state
:stdkeyhandler |k:keys|
    ?k 0 = if "NULL KEY". then
    # get the current state's key hash
    ?CurState?`keys !keys
    ?keys isnone if
        "States must contain either onkeydown or keys".
        "Current state " p ?CurState?`name p " doesn't.".
        quit
    then
    
    ?k keycode dup !k ?keys get
    
    # if it's not none, run the function
    dup isnone not if
        snd @
    else drop
        "Unknown key in this state: " ?k +.
    then
;

public

# call this from onkeydown 

:dokeys
    ?CurState?`onkeydown isnone not if
        ?CurState?`onkeydown @
    else
        stdkeyhandler
    then
;    

################# Graphical helpers
    
[255,0,0,255] const Red
[0,255,0,255] const Green
[0,0,255,255] const Blue
[255,255,0,255] const Yellow
[0,255,255,255] const Cyan
[255,0,255,255] const Magenta
[255,255,255,255] const White
[0,0,0,255] const Black

private
none!Font
:chkfont ?Font isnone if "No ?Font defined" `ex$sdlutils throw then;
public

:setfont
    :"Set the font for text rendering"
    !Font;

:drawtext |s,x,y:t|
    :"Draw text in the current font"
    chkfont
    ?s ?Font sdl$maketext !t
    ?x ?y none none ?t sdl$blit
;

:drawtextcentre |s,x,y:t,w,h|
    :"Draw text in the current font, centre justified"
    chkfont
    ?s ?Font sdl$maketext !t
    ?t sdl$texsize !w !h
    ?x ?w 2 / -
    ?y ?h 2 / -
    none none ?t sdl$blit
;

private
0!MouseX 0!MouseY
[] !Timers
none!CurTimer

:runtimers
    []
    ?Timers each {
        i!CurTimer
        none!ResetTime
        time$now i?`nexttime > if 
            i?`func@
            ?ResetTime isnone not if
                time$now ?ResetTime + i!`nexttime
                i,
            then
        else i, then
    }
    !Timers
    none!CurTimer
;

public

:timer |f,t:|
    :"Start a timer to fire in t seconds with function f. Timer is reset with resettimer"
    [% `nexttime ?t time$now+, `func ?f] ?Timers push
;

:resettimer |t:| :"reset timer for time t, only works in a timer function"
    ?CurTimer isnone not if
        ?t!ResetTime
    then
;


:run
    (
        ?CurState?`onkeydown isnone not if
            ?CurState?`onkeydown @
        else
            stdkeyhandler
        then
    ) sdl$onkeydown


    (|x,y,b:|
        ?CurState?`onmousedown isnone not if
            ?x ?y ?b ?CurState?`onmousedown @
        then
    ) sdl$onmousedown

    (!MouseY !MouseX) sdl$onmousemove
    

    (
        sdl$clear
        White!sdl$col
        ?RenderStateXY isnone not if 
            "State: " ?CurState?`name + 
            ?RenderStateXY explode drawtext
        then
        ?CurState?`draw@
        sdl$flip 0.1 time$delay
        runtimers
    ) sdl$ondraw

    sdl$loop
;    


# standard help state

30!HelpLineSpacing
[%
 `name "help",
 `draw (|:y|
     20!y
     ?PrevState?`keys isnone if
         "No help in this state" 10 ?y drawtext
     else
         ?PrevState?`keys each {
             cases
                 i 127 chr = if "del" case
                 i 27 chr = if "esc" case
                 i type `symbol = if i tostr case
                 i otherwise
             10 ?y drawtext
             ival fst 200 ?y drawtext
             ?y ?HelpLineSpacing + !y
         }
     then
     
 ),
 `onkeydown (drop prevstate)
 ] !StateHelp

