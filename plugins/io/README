Fairly crude file IO plugin.

Import with
    library "io" import
    
and then

    "foo" "wb" open !F
    
to open a (binary) file and store handle in F (modes are as in fopen())

    "foo" ?F write
    
to write a string (sans newline)

    1 ?F write
or
    1.0 ?F write
    
will write a 32-bit int or float in binary - to write as a string, do
something like 

    1 ""+ ?F write
    
to coerce to a string. To read a string, do

    ?F readstr
    
to read the next line, or 

    ?F readfilestr
    
to read the entire file into a string.



More binary stuff:

    3 ?F write8
    3 ?F write16
    3 ?F write32
    3 ?F writeu8
    3 ?F writeu16
    3 ?F writeu32
    3 ?F writefloat
    
will write the appropriate signed/unsigned int or float type (although
all ints will be converted to angort's signed int type)

and
    ?F read8
    ?F read16
    ?F read32
    ?F readu8
    ?F readu16
    ?F readu32
    ?F readfloat

will read the value and stack it, or stack none if not enough bytes
were read or an error occurred.

    ?F eof 
    
will return true if the end-of-file character was read


Finally,

    [1,2,3] ?F writelist
    [% `foo 1, `bar 2, `cod 3] ?F writehash
    
will write a list or hash to a file, and

    ?F readlist
    ?F readhash
    
will read them back. Lists and hashes can be combined and nested,
provided they ultimately consist of ints, floats, strings or symbols.



To recap, you'll typically write using just "write", and read using
the appropriate word for the type you know you've written.

