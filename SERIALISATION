There are two kinds of values: primitives, like integers and floats,
where the data is stored directly in the value union; and reference types,
like closures, strings, ranges and lists, where the data is stored in
some structure and two values may reference the same structure.

The former are saved in a straightforward manner: the Serialiser
calls the saveValue() method in the type and saves the value directly.
The latter are rather more complex and involve  "data blocks" and
"fixups".

A data block represents the contents of a value's reference. The value would
normally point to the block, but that isn't preserved by saving.
Therefore, we save the block separately using saveDataBlock(), and then
in saveValue() we write a "fixup". This is a special value of type Fixup
containing the index of the data block in the "fixup table", which contains
those blocks.

All the data blocks are saved first, and any references to
other data blocks (which should appear as Values) should have 
fixups stored. Reference counts are initially zero, then
incremented as fixups are resolved. The save sequence goes like this:

iterate over entire tree of data, generating a fixup table
 containing type and datablock pointer, keyed by index.

open file 
save magic numbers
for each entry in fixup table
    write type ID
    write data block
    
save(globals)
save(constants)
save(words)

save(x):
    write count
    for each item:
        write name
        write value (call saveValue on the value itself)
        
saveValue:
    write type ID
    call saveValue method in type object, passing the value
        

    
