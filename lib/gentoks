#!/usr/bin/env python

import sys
import os

# generate tokens from a token list into a .h and .cpp file
# Usage: gentoks INNAME OUTNAME
# and outfile will be appended with .cpp and .h

# Will also generate hkwords, containing keyword highlighting commands
# for microemacs.

infile = sys.argv[1]
outfile = sys.argv[2]

def gethkline(name):
    return 'hilight   .hilight.monconf 1 "%s" .scheme.keyword\n' % name

with open(sys.argv[1]) as f:
    with open(outfile+".h","w") as hout:
        hout.write("// Token list - generated by gentoks.py from %s\n\n" % infile)
        hout.write("#include \"tokeniser.h\"\n");
        hout.write("extern TokenRegistry %s[];\n" % outfile)
        with open(outfile+".cpp","w") as cppout:
            cppout.write("// Token table - generated by gentoks.py from %s\n\n" % infile)
            cppout.write("#include \"%s.h\"\n" % outfile);
            cppout.write("TokenRegistry %s[] = {\n" % outfile)
            
            with open("hkwords","w") as hkout:
                content = f.readlines()

                ct=0
                for x in content:
                    print("--> "+x.strip())
                    if ':' in x:
                        val,name = x.rsplit(':',1)
                        val = val.strip()
                        name = name.strip()
                        cppout.write("\t{\"%s\", %s},\n" % (val,name))
                        hout.write("#define\t%s\t%d\n" % (name,ct))
                        if val[0]!='*':
                            hkout.write(gethkline(val))
                        ct+=1
                cppout.write("{NULL,-10}\n");
                cppout.write("};\n")

