*** NESTED CLOSURE BUG ***
    :test |a:|
        ((?a *)map)map;

    [[1]] 2 test.

fails inside closure init, because there is no block allocated (it's NULL).
A workaround is to force the outer function to close on the variable by
invoking it in the outer lambda:
    :test |a:|
        (?a drop(?a *)map)map;

The underlying cause is, I think, that the above kind of program creates a
three level structure:
    * test,
    * an outer lambda without any parameters or locals
    * an inner lambda which uses a parameter to "test".
Thus "test" and the inner lambda get closures created, but the outer lambda
doesn't. This screws up the "levels" the closure system uses.
Possibilities: 
    * create a "fake" closure for all codeblocks which are above a closure
    * find some way of "skipping" levels.


LOCALDEC/LOCALINC etc don't work as closures. Need to reorganise 
opcodes to automatically be able to remap local variable funcs
to closure funcs.

Not yet documented:
    redir/endredir (and other IO)
    barewords
    heredocs
    exceptions and signal handling
    recurse
    def defconst
    constant << >> expressions
    sourceline
    in, any, all, slice, zipWith
    ival,iidx etc.
    icurnext
    split (string)
    Parameter type checking
    yield and routines! Must be anon
    various new words: fst snd etc, explode, eval.. sf, nsf..
    compileif! Dear god..
    Mechanisms for package/library reload prevention. Package is nasty.
    gather
    splitwhite


    
*** Signed/unsigned ints! 
    - readu32 just converts to a signed 32, it should at least push as long.
    - shifts don't work on longs (just convert to ints!)

*** Weird thing with mbstowcs in trunc failing first time - global state
kept somewhere?
    
Exceptions:
    Odd stack frames can result because of the peekPtr optimisation
        in things like std::get
***    Spurious stack traces

What would be glorious:
    copyonwrite list clones and slices. When we clone/slice a list, we actually make
    a new reference to the old data with some optional slice info. Either a new data
    type (might have messy ramifications) or some cleverness in ArrayList (might be hard
    to reftrack). We only actually copy the list if we ever write to it.
    We also need to keep copies of the referenced lists in the original, so
    if we write to *that* all the originals are cloned off first.
    And when we clone a clone, we just get a new stub of the original.
    
   

closure iterators - WTF?

MAKE ALL ITERATORS STACK, NOT HEAP.
    
multiple requires/library loads need to work

Binops:
    1) assign each typeobj a unique integer (which it keeps) when it
       is constructed
    2) each typeobj also has an intkeyedhash of function pointers for
       the binops, where the LHS is the current type and the RHS is
       stored in the key
    3) there is a registerBinops function in Angort which for each entry
        a) builds an int out of the RHS uuid and the binop code
        b) writes the function pointer to the hash stored in the LHS
       This is called by Angort for the internal types once the type
       system has been set up, and also by libraries after they have
       inited. This can be done using hackery in makeWords.pl
    4) When a binop is found, look up the binop and RHS id in the LHS hash,
       then call the function (or error if null).
       


Given that there are quite a few singletons (e.g type objects)
there's no real point in Angort not being a singleton(?)

Closures (done):
    There's a better way of doing closures. Instead of each ")" operation
    creating a closure in the child which refers to the parent, we
    create a closure as soon as the first ?xx is created. This belongs
    to the outer (creating) context, and references to it are given
    to any children, with new entries in the closure table being
    created as necessary. All subsequent references to closed variables
    in the outer function are then references to the closure.
    
    In upshot, then, there is only one closure created, and it belongs
    to both the children and the outer function.

How namespaces now work:
    When a namespace is imported, it is both added to the import list
    and all entries which are not private are marked as imported.
    The space itself is marked as imported, so that new entries made
    after the import are also marked as imported. This only applies
    when the entire space is imported - partial imports just mark the
    imported items, not the whole space.

    Two namespaces are created at startup: std and user.
    All standard words are added to std, notwithstanding their
    "module" name which is currently ignored. The user namespace
    is then left as the current namespace into which words are defined.
    Both these namespaces are fully imported.

    When searching for a name, fully specified names are resolved by
    searching only the given space (including privates.) Otherwise,
    the current space is searched, followed by the entries marked as
    imported in the imported spaces.
    
    An exception to this is when the "global" directive is used to define
    a new global - in this case, the imported spaces are not searched.

    Consider the following situation: you want to create a new definition
    for a standard word, say "p". If you write:
    
        :p .. ;
    
    the error "cannot redefine constant p" will result - this is 
    because the system finds std$p and thinks you want to write over
    it. However, if you do
    
        global p
        :p ... ;
        
    that will work, because the "global" will create a new definition
    in the user namespace (because it doesn't search the imported namespaces).
    The word definition will find this new value first, and will
    write the word codeblock to it. The std$p word will still be
    available by using its full name.
          
    
